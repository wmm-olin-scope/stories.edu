// Generated by CoffeeScript 1.6.3
var Q, User, assertHasEmail, assertHasPassword, auth, checks, fail, makePostUser, postEmailUser, postLocalLogin, postLocalUser, putLocalLogout, stateList, succeed, updateUser, users, utils, _, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

User = (users = require('../data/users')).User;

stateList = require('../data/schools').stateList;

auth = require('../lib/auth');

_ref = utils = require('../lib/utils'), fail = _ref.fail, succeed = _ref.succeed;

_ = require('underscore');

Q = require('q');

checks = {
  email: utils.checkBody('email', function(email) {
    utils.check(email).isEmail();
    return email;
  }),
  password: utils.checkBody('password', function(password) {
    utils.check(password({
      len: 'Please enter a password that is 6 to 32 characters long.'
    }).len(6, 32));
    return password;
  }),
  lastName: utils.makeNameCheck('lastName'),
  firstName: utils.makeNameCheck('firstName'),
  fullName: utils.makeNameCheck('fullName'),
  age: utils.checkBody('age', function(age) {
    utils.check(age, 'Please enter a valid age (in years).'.isInt().min(1).max(110));
    return age | 0;
  }),
  category: utils.checkBody('category', function(cat) {
    if (cat == null) {
      return users.categories[0];
    }
    if (__indexOf.call(users.categories, cat) < 0) {
      throw {
        message: "Not a valid category: " + cat
      };
    }
    return cat;
  }),
  lat: utils.checkBody('lat', function(lat) {
    utils.check(lat, 'Invalid latitude.'.isFloat().min(-90).max(90));
    return +lat;
  }),
  lon: utils.checkBody('lon', function(lon) {
    utils.check(lon, 'Invalid longitude.'.isFloat().min(-180).max(180));
    return +lon;
  }),
  state: utils.checkBody('state', function(state) {
    if (__indexOf.call(stateList, state) < 0) {
      throw "Not a valid state code: " + state;
    }
    return state;
  }),
  city: utils.checkBody('city', function(city) {
    utils.check(city, 'Please enter a valid city name.'.len(2, 18));
    return utils.sanitize(city).escape();
  }),
  zip: utils.checkBody('zip', function(zipcode) {
    return utils.check(zipcode, 'Please enter a valid US ZIP code.'.regex(/^\d{5}(?:[-\s]\d{4})?$/));
  }),
  address: utils.checkBody('address', function(address) {
    var _ref1;
    if (_.isString(address)) {
      address = [address];
    }
    if ((1 <= (_ref1 = address.length) && _ref1 <= 4)) {
      throw {
        message: 'Address must be 1 to 4 lines long.'
      };
    }
    return _.map(address, function(line) {
      utils.check(line).len(1, 128);
      return utils.sanitize(line).escape();
    });
  })
};

assertHasEmail = function(values, res) {
  if (values.email == null) {
    fail(res, {
      message: 'You must provide a valid email.'
    });
    return false;
  } else {
    return true;
  }
};

assertHasPassword = function(values, res) {
  if (values.password == null) {
    fail(res, {
      message: 'You must provide a valid password.'
    });
    return false;
  } else {
    return true;
  }
};

updateUser = function(user, values) {
  user.email = values.email;
  if (user.joined == null) {
    user.joined = Date.now();
  }
  if (user.name == null) {
    user.name = {};
  }
  if (values.firstName != null) {
    user.name.first = values.firstName;
  }
  if (values.lastName != null) {
    user.name.last = values.lastName;
  }
  if (values.fullName != null) {
    user.name.full = values.fullName;
  }
  if (values.category != null) {
    user.category = values.category;
  }
  if (values.age != null) {
    user.age = values.age;
  }
  if (user.schools == null) {
    user.schools = [];
  }
  if (user.location == null) {
    user.location = {};
  }
  if (values.lat != null) {
    user.location.coord = {
      lat: values.lat,
      lon: values.lon
    };
  }
  if (user.location.address == null) {
    user.location.address = {};
  }
  if (values.address != null) {
    user.location.address.lines = values.address;
  }
  if (values.city != null) {
    user.location.address.city = values.city;
  }
  if (values.state != null) {
    user.location.address.state = values.state;
  }
  if (values.zip != null) {
    user.location.address.zip = values.zip;
  }
  return user;
};

makePostUser = function(allowExisting, checkRequiredFields) {
  return function(req, res) {
    var failed, values, _ref1;
    _ref1 = utils.checkAll(req, res, checks), failed = _ref1[0], values = _ref1[1];
    if (failed || !checkRequiredFields(values, res)) {
      return;
    }
    return Q.ninvoke(User, 'findOne', {
      email: values.email
    }.then(function(user) {
      if (user != null) {
        if (!allowExisting) {
          return Q.reject({
            message: 'A user already exists with this email.'
          });
        }
      } else {
        user = new User();
      }
      updateUser(user, values);
      return Q.ninvoke(user, 'save');
    }).then(function(_arg) {
      var user;
      user = _arg[0];
      if (values.password != null) {
        return user.createLocalAuth(values.password);
      } else {
        return Q(user);
      }
    }).then(function(user) {
      return Q.ninvoke(req, 'login', user.then(function() {
        return succeed(res, {
          user: req.user
        }["catch"](function(err) {
          return fail(res, err.done());
        }));
      }));
    }));
  };
};

postEmailUser = makePostUser(true, assertHasEmail);

postLocalUser = makePostUser(false, function(values, res) {
  return assertHasEmail(values, res) && assertHasPassword(values, res);
});

postLocalLogin = function(req, res) {
  return succeed(res, {
    user: req.user
  });
};

putLocalLogout = function(req, es) {
  return succeed(res);
};

exports.create = function(app) {
  app.post('/login/local', auth.localLogin, postLocalLogin);
  app.put('/logout', auth.logout, putLocalLogout);
  app.post('/user/email', postEmailUser);
  return app.post('/user/local', postLocalUser);
};
