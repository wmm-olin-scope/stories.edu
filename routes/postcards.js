// Generated by CoffeeScript 1.7.1
(function() {
  var Postcard, Q, User, auth, checks, fail, postPostCard, stateList, succeed, updatePostcard, utils, youtubeIdRegEx, _, _ref;

  Postcard = require('../data/postcards').Postcard;

  User = require('../data/users').User;

  stateList = require('../data/schools').stateList;

  auth = require('../lib/auth');

  _ref = utils = require('../lib/utils'), fail = _ref.fail, succeed = _ref.succeed;

  _ = require('underscore');

  Q = require('q');

  youtubeIdRegEx = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;

  checks = {
    message: utils.checkBody('message', function(message) {
      return utils.sanitize(message).escape();
    }),
    youtubeId: utils.checkBody('youtubeUrl', function(youtubeUrl) {
      var match;
      match = youtubeIdRegEx.exec(youtubeUrl);
      if (match == null) {
        throw 'Not a valid YouTube url';
      }
      return match[1];
    }),
    lastName: makeNameCheck('recipientLastName'),
    firstName: makeNameCheck('recipientFirstName'),
    fullName: makeNameCheck('recipientFullName'),
    email: utils.checkBody('recipientEmail', function(email) {
      utils.check(email).isEmail();
      return email;
    }),
    schoolType: utils.checkBody('schoolType', function(type) {
      if (schoolType !== 'public' && schoolType !== 'private' && schoolType !== 'other') {
        throw "Not a valid school type: " + type + ".";
      }
      return type;
    }),
    schoolId: utils.checkBody('schoolId', function(id) {
      if (id.length !== 24) {
        throw "Not a valid school id: " + id;
      }
      return id;
    })
  };

  updatePostcard = function(postcard, values, req) {
    if (values.message != null) {
      postcard.message = values.message;
    }
    if (postcard.created == null) {
      postcard.created = Date.now();
    }
    if (postcard.youtubeId == null) {
      postcard.youtubeId = values.youtubeId;
    }
    if (postcard.recipient == null) {
      postcard.recipient = {};
    }
    if (postcard.recipient.name == null) {
      postcard.recipient.name = {};
    }
    if (values.firstName != null) {
      postcard.recipient.name.first = values.firstName;
    }
    if (values.lastName != null) {
      postcard.recipient.name.last = values.lastName;
    }
    if (values.fullName != null) {
      postcard.recipient.name.full = values.fullName;
    }
    if (values.email != null) {
      postcard.recipient.email = values.email;
    }
    switch (values.schoolType) {
      case 'public':
        postcard.school["public"] = values.schoolId;
        break;
      case 'private':
        postcard.school["private"] = values.schoolId;
    }
    if (req.user != null) {
      return postcard.author = req.user;
    }
  };

  postPostCard = function(req, res) {
    var failed, values, _ref1;
    _ref1 = utils.checkAll(req, res, checks), failed = _ref1[0], values = _ref1[1];
    if (failed) {
      return;
    }
    return Q.ninvoke(User, 'findOne', {
      email: values.email
    }).then(function(user) {
      if (user != null) {
        if (!allowExisting) {
          return Q.reject({
            message: 'A user already exists with this email.'
          });
        }
      } else {
        user = new User();
      }
      updateUser(user, values);
      return Q.ninvoke(user, 'save');
    }).then(function(_arg) {
      var user;
      user = _arg[0];
      if (values.password != null) {
        return user.createLocalAuth(values.password);
      } else {
        return Q(user);
      }
    }).then(function(user) {
      return Q.ninvoke(req, 'login', user);
    }).then(function() {
      return succeed(res, {
        user: req.user
      });
    })["catch"](function(err) {
      return fail(res, err);
    }).done();
  };

  exports.create = function(app) {};

}).call(this);
